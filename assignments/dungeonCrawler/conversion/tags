!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AMMUNITION_SYM	desc.h	29;"	d
AMULET_SYM	desc.h	23;"	d
ARMOR_SYM	desc.h	17;"	d
BOOK_SYM	desc.h	26;"	d
BOOTS_SYM	desc.h	21;"	d
BORDER	defs.h	/^  BORDER,$/;"	e	enum:TileType
BORDER_CHAR	defs.h	18;"	d
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wall -Werror -std=c++11$/;"	m
CHARACTER_H	Character.cpp	1;"	d	file:
CHARACTER_H	dungeon.h	22;"	d
CHARACTER_H	game.h	30;"	d
CHARACTER_H	monster.h	18;"	d
CLIMITS	dungeon.h	18;"	d
CLOAK_SYM	desc.h	19;"	d
CONTAINER_SYM	desc.h	32;"	d
Character	Character.cpp	/^Character::Character() {$/;"	f	class:Character
Character	Character.h	/^class Character {$/;"	c
Compare	game.cpp	/^struct Compare {$/;"	s	file:
CoordPair	dungeon.h	/^    CoordPair(Coordinate initial, Coordinate comparingTo) {$/;"	f	class:CoordPair
CoordPair	dungeon.h	/^class CoordPair {$/;"	c
Coordinate	defs.h	/^    Coordinate() {$/;"	f	class:Coordinate
Coordinate	defs.h	/^    Coordinate(int y, int x) {$/;"	f	class:Coordinate
Coordinate	defs.h	/^class Coordinate {$/;"	c
DEBUG	defs.h	28;"	d
DEFS_H	dungeon.h	10;"	d
DEFS_H	screen.h	10;"	d
DESC_H	Character.h	26;"	d
DESC_H	dice.cpp	6;"	d	file:
DESC_H	fileReading.h	10;"	d
DESC_H	monster.h	10;"	d
DESC_H	object.h	10;"	d
DOWNSTAIR	defs.h	/^  DOWNSTAIR$/;"	e	enum:TileType
DOWNSTAIR_CHAR	defs.h	20;"	d
DUNGEON_H	Character.h	6;"	d
DUNGEON_H	dungeon.cpp	1;"	d	file:
DUNGEON_H	game.h	2;"	d
DUNGEON_H	monster.h	26;"	d
DUNGEON_H	object.h	18;"	d
Dungeon	dungeon.cpp	/^Dungeon::Dungeon() {$/;"	f	class:Dungeon
Dungeon	dungeon.cpp	/^Dungeon::Dungeon(string loc) {$/;"	f	class:Dungeon
Dungeon	dungeon.h	/^class Dungeon {$/;"	c
END_LINE	fileReading.cpp	7;"	d	file:
ERRATIC_BIT	defs.h	11;"	d
FILEREADING_H	game.h	38;"	d
FILEREADING_H	monster.h	22;"	d
FILEREADING_H	object.h	22;"	d
FIRST_LINE_MONST	fileReading.cpp	3;"	d	file:
FIRST_LINE_OBJ	fileReading.cpp	6;"	d	file:
FLASK_SYM	desc.h	27;"	d
FOOD_SYM	desc.h	30;"	d
FSTREAM	fileReading.h	14;"	d
FUNCTIONAL	Character.h	10;"	d
GAME_H	game.cpp	1;"	d	file:
GLOVES_SYM	desc.h	20;"	d
GOLD_SYM	desc.h	28;"	d
HALL	defs.h	/^  HALL,$/;"	e	enum:TileType
HALL_CHAR	defs.h	15;"	d
HELMET_SYM	desc.h	18;"	d
INTELLIGENCE_BIT	defs.h	8;"	d
IOSTREAM	Character.h	2;"	d
IOSTREAM	dungeon.h	14;"	d
IOSTREAM	fileReading.h	2;"	d
IOSTREAM	game.h	18;"	d
LIGHT_SYM	desc.h	24;"	d
MAX_HARDNESS	defs.h	1;"	d
MAX_HEIGHT	defs.h	3;"	d
MAX_RAND_MONST_COUNT	defs.h	24;"	d
MAX_WIDTH	defs.h	2;"	d
MIN_ROOM_COUNT	defs.h	6;"	d
MIN_ROOM_HEIGHT	defs.h	4;"	d
MIN_ROOM_WIDTH	defs.h	5;"	d
MONSTER_H	game.h	42;"	d
MOVE_BETWEEN_FLOORS	defs.h	13;"	d
NCURSES_H	screen.h	18;"	d
NCURSES_H	screen.h	2;"	d
NPC	Character.cpp	/^NPC::NPC(){};$/;"	f	class:NPC
NPC	Character.cpp	/^NPC::NPC(int id, Coordinate coord, int speed, Dungeon* dun, int nextEventTime, char type, PC* pc) {$/;"	f	class:NPC
NPC	Character.h	/^class NPC : public Character {$/;"	c
OBJECT_H	dungeon.h	30;"	d
OBJECT_H_BUILT	object.h	28;"	d
OFFHAND_SYM	desc.h	15;"	d
PC	Character.cpp	/^PC::PC(int id, Coordinate coord, int speed, Dungeon* dun, int nextEventTime) {$/;"	f	class:PC
PC	Character.h	/^class PC : public Character {$/;"	c
PC_MAX_SIGHT_DIST	defs.h	26;"	d
QUEUE	game.h	26;"	d
RANGED_SYM	desc.h	16;"	d
REQ	Makefile	/^REQ=genCtags game.cpp dungeon.cpp Character.cpp screen.o$/;"	m
REQ1	Makefile	/^REQ1=genCtags game.cpp dungeon.cpp Character.cpp screen.o fileReading.o$/;"	m
RING_SYM	desc.h	22;"	d
ROCK	defs.h	/^  ROCK,$/;"	e	enum:TileType
ROCK_CHAR	defs.h	17;"	d
ROOM	defs.h	/^  ROOM,$/;"	e	enum:TileType
ROOM_CHAR	defs.h	16;"	d
Room	dungeon.cpp	/^Room::Room() {$/;"	f	class:Room
Room	dungeon.cpp	/^Room::Room(int y, int x, int height, int width) {$/;"	f	class:Room
Room	dungeon.h	/^class Room {$/;"	c
SCREEN_H	dungeon.h	26;"	d
SCREEN_H	game.h	34;"	d
SCROLL_SYM	desc.h	25;"	d
SSTREAM	Character.h	22;"	d
STACK_SYM	desc.h	33;"	d
START_LINE_MONST	fileReading.cpp	4;"	d	file:
START_LINE_OBJ	fileReading.cpp	5;"	d	file:
STDLIB_H	desc.h	2;"	d
STDLIB_H	dice.cpp	2;"	d	file:
STDLIB_H	dungeon.h	2;"	d
STDLIB_H	game.h	10;"	d
STDLIB_H	game.h	6;"	d
STDLIB_H	monster.h	2;"	d
STDLIB_H	object.h	2;"	d
STRING	Character.h	18;"	d
STRING	desc.h	10;"	d
STRING	fileReading.h	6;"	d
STRING	game.h	22;"	d
STRING	monster.h	14;"	d
STRING	object.h	14;"	d
STRING	screen.h	14;"	d
Settings	game.h	/^class Settings{$/;"	c
TELEPATHY_BIT	defs.h	9;"	d
TELEPORT_CHAR	defs.h	22;"	d
TIME_H	game.h	14;"	d
TUNNELING_BIT	defs.h	10;"	d
Tile	dungeon.cpp	/^Tile::Tile(TileType type) {$/;"	f	class:Tile
Tile	dungeon.h	/^class Tile {$/;"	c
TileType	defs.h	/^enum TileType {$/;"	g
UNISTD_H	Character.h	14;"	d
UNISTD_H	screen.h	6;"	d
UPSTAIR	defs.h	/^  UPSTAIR,$/;"	e	enum:TileType
UPSTAIR_CHAR	defs.h	19;"	d
VECTOR	desc.h	6;"	d
VECTOR	dungeon.h	6;"	d
VECTOR	monster.h	6;"	d
VECTOR	object.h	6;"	d
WAND_SYM	desc.h	31;"	d
WEAPON_SYM	desc.h	14;"	d
abilities	desc.h	/^    vector<string> abilities;$/;"	m	class:monsterDesc
abilitiesSet	fileReading.h	/^    bool abilitiesSet;$/;"	m	class:monstBools
ad	Character.h	/^    rollUp ad;$/;"	m	class:Character
ad	Character.h	/^    rollUp ad;$/;"	m	class:NPC
ad	desc.h	/^    rollUp ad;$/;"	m	class:monsterDesc
adSet	fileReading.h	/^    bool adSet;$/;"	m	class:monstBools
addHallways	dungeon.cpp	/^void Dungeon::addHallways() {$/;"	f	class:Dungeon
addRooms	dungeon.cpp	/^void Dungeon::addRooms(int numRooms) {$/;"	f	class:Dungeon
addStairs	dungeon.cpp	/^void Dungeon::addStairs() {$/;"	f	class:Dungeon
base	desc.h	/^    int base;$/;"	m	class:rollUp
build	dungeon.cpp	/^void Dungeon::build() {$/;"	f	class:Dungeon
buildMonster	monster.cpp	/^void monsterFactory::buildMonster(monsterDesc desc, NPC* monster, int currentEventTime, PC* pc) {$/;"	f	class:monsterFactory
buildMonsters	monster.cpp	/^vector<NPC*> monsterFactory::buildMonsters(vector<monsterDesc> descList, int numToBuild, int currentEventTime, PC* pc) {$/;"	f	class:monsterFactory
buildObject	object.cpp	/^int objectFactory::buildObject(objectDesc desc, object* obj) {$/;"	f	class:objectFactory
buildObjects	object.cpp	/^int objectFactory::buildObjects(vector<objectDesc>& descList, int numToBuild) {$/;"	f	class:objectFactory
canSeeFrom	dungeon.cpp	/^bool Dungeon::canSeeFrom(Coordinate from, Coordinate to) {$/;"	f	class:Dungeon
charMap	dungeon.h	/^    vector <vector<Character*>> charMap;$/;"	m	class:Dungeon
cleanMonstDesc	fileReading.cpp	/^void cleanMonstDesc(monsterDesc& desc) {$/;"	f
cleanObjDesc	fileReading.cpp	/^void cleanObjDesc(objectDesc& desc) {$/;"	f
cleanString	fileReading.cpp	/^void cleanString(string& toClean) {$/;"	f
clearMessageArea	screen.cpp	/^int clearMessageArea() {$/;"	f
colors	Character.h	/^    vector<string> colors;$/;"	m	class:Character
colors	desc.h	/^    vector<string> colors;$/;"	m	class:monsterDesc
colors	desc.h	/^    vector<string> colors;$/;"	m	class:objectDesc
colors	object.h	/^    vector<string> colors;$/;"	m	class:object
colorsSet	fileReading.h	/^    bool colorsSet;$/;"	m	class:monstBools
colorsSet	fileReading.h	/^    bool colorsSet;$/;"	m	class:objectBools
comparingTo	dungeon.h	/^    Coordinate comparingTo;$/;"	m	class:CoordPair
coord	Character.h	/^    Coordinate coord;$/;"	m	class:Character
damBonus	desc.h	/^    rollUp damBonus;$/;"	m	class:objectDesc
damBonus	object.h	/^    int damBonus;$/;"	m	class:object
damBonusSet	fileReading.h	/^    bool damBonusSet;$/;"	m	class:objectBools
defencesBonusSet	fileReading.h	/^    bool defencesBonusSet;$/;"	m	class:objectBools
defenseBonus	desc.h	/^    rollUp defenseBonus;$/;"	m	class:objectDesc
defenseBonus	object.h	/^    int defenseBonus;$/;"	m	class:object
description	Character.h	/^    string description;$/;"	m	class:Character
description	desc.h	/^    string description;$/;"	m	class:monsterDesc
description	desc.h	/^    string description;$/;"	m	class:objectDesc
description	object.h	/^    string description;$/;"	m	class:object
descriptionSet	fileReading.h	/^    bool descriptionSet;$/;"	m	class:monstBools
descriptionSet	fileReading.h	/^    bool descriptionSet;$/;"	m	class:objectBools
diceCount	desc.h	/^    int diceCount;$/;"	m	class:rollUp
diceType	desc.h	/^    int diceType;$/;"	m	class:rollUp
dodgeBonus	desc.h	/^    rollUp dodgeBonus;$/;"	m	class:objectDesc
dodgeBonus	object.h	/^    int dodgeBonus;$/;"	m	class:object
dodgeBonusSet	fileReading.h	/^    bool dodgeBonusSet;$/;"	m	class:objectBools
draw	dungeon.cpp	/^void Dungeon::draw() {$/;"	f	class:Dungeon
drawCharacter	screen.cpp	/^int drawCharacter(Coordinate coord, char symbol) {$/;"	f
drawDunMap	Character.cpp	/^void PC::drawDunMap() {$/;"	f	class:PC
drawMonsterBox	Character.cpp	/^void PC::drawMonsterBox(int topLeft_y, int topLeft_x, int horBorderWidth, int vertBorderWidth, int numMonstersShown, int stringAreaWidth) {$/;"	f	class:PC
drawNormalSpot	Character.cpp	/^void PC::drawNormalSpot(Coordinate spot) {$/;"	f	class:PC
drawString	screen.cpp	/^int drawString(Coordinate coord, char* str) {$/;"	f
dun	Character.h	/^    Dungeon* dun;$/;"	m	class:Character
dun	monster.h	/^    Dungeon* dun;$/;"	m	class:monsterFactory
dun	object.h	/^    Dungeon* dun;$/;"	m	class:objectFactory
dunMap	Character.h	/^    vector<vector<TileType>> dunMap;$/;"	m	class:PC
dungeonInit	game.cpp	/^Dungeon dungeonInit() {$/;"	f
endianSwap_uInt	dungeon.cpp	/^uint32_t Dungeon:: endianSwap_uInt(int input) {$/;"	f	class:Dungeon
fillDistMap	dungeon.cpp	/^void Dungeon::fillDistMap(vector<vector<int>>& distMap, vector<Coordinate>& queue, bool canTunnel) {$/;"	f	class:Dungeon
fillMonsterList	Character.cpp	/^vector<string> PC::fillMonsterList() {$/;"	f	class:PC
genBaseDun	dungeon.cpp	/^void Dungeon::genBaseDun() {$/;"	f	class:Dungeon
genCharacterType	game.cpp	/^char genCharacterType() {$/;"	f
genDistMap	dungeon.cpp	/^vector<vector<int>> Dungeon::genDistMap(int y, int x, bool canTunnel) {$/;"	f	class:Dungeon
genMonsterString	Character.cpp	/^string PC::genMonsterString(int ydiff, int xdiff, char symbol) {$/;"	f	class:PC
genType	monster.cpp	/^char genType(vector<string> abilities) {$/;"	f
getCharacterId	Character.cpp	/^int Character::getCharacterId(Coordinate loc) {$/;"	f	class:Character
getEmptyMap	dungeon.cpp	/^vector<vector<int>> getEmptyMap() {$/;"	f
getEmptySpace	dungeon.cpp	/^Coordinate Dungeon::getEmptySpace() {$/;"	f	class:Dungeon
getFirstChar	fileReading.cpp	/^char getFirstChar(string str) {$/;"	f
getLastChar	fileReading.cpp	/^char getLastChar(string str) {$/;"	f
getObjSym	object.cpp	/^char getObjSym(string type) {$/;"	f
getSymbol	Character.cpp	/^char getSymbol(char type) {$/;"	f
getTileSym	dungeon.cpp	/^char getTileSym(TileType type) {$/;"	f
getWordsOnLine	fileReading.cpp	/^void getWordsOnLine(vector<string> &storage, ifstream& file) {$/;"	f
hardness	dungeon.h	/^    uint8_t hardness;$/;"	m	class:Tile
height	dungeon.h	/^    uint8_t height;$/;"	m	class:Room
hitBonus	desc.h	/^    rollUp hitBonus;$/;"	m	class:objectDesc
hitBonus	object.h	/^    int hitBonus;$/;"	m	class:object
hitBonusSet	fileReading.h	/^    bool hitBonusSet;$/;"	m	class:objectBools
hp	Character.h	/^    int hp;$/;"	m	class:Character
hp	desc.h	/^    rollUp hp;$/;"	m	class:monsterDesc
hpSet	fileReading.h	/^    bool hpSet;$/;"	m	class:monstBools
id	Character.h	/^    int id;$/;"	m	class:Character
initial	dungeon.h	/^    Coordinate initial;$/;"	m	class:CoordPair
isArtifact	desc.h	/^    bool isArtifact;$/;"	m	class:objectDesc
isArtifact	object.h	/^    bool isArtifact;$/;"	m	class:object
isArtifactSet	fileReading.h	/^    bool isArtifactSet;$/;"	m	class:objectBools
isFilledOut	fileReading.cpp	/^bool monstBools::isFilledOut() {$/;"	f	class:monstBools
isFilledOut	fileReading.cpp	/^bool objectBools::isFilledOut() {$/;"	f	class:objectBools
isInDun	Character.cpp	/^bool isInDun(Coordinate coord) {$/;"	f
isOpenSpace	dungeon.cpp	/^bool Dungeon::isOpenSpace(Coordinate coord) {$/;"	f	class:Dungeon
killed	Character.h	/^    int killed;$/;"	m	class:movementResDTO
lastSeenPCLoc	Character.h	/^    Coordinate lastSeenPCLoc;$/;"	m	class:NPC
load	game.h	/^    bool load;$/;"	m	class:Settings
loadSaveLoc	game.h	/^    string loadSaveLoc;$/;"	m	class:Settings
main	game.cpp	/^int main(int argc, char* argv[]) {$/;"	f
makePathToRoom	dungeon.cpp	/^void  Dungeon::makePathToRoom(Room from, Room to) {$/;"	f	class:Dungeon
map	dungeon.h	/^    vector <vector<Tile>> map;$/;"	m	class:Dungeon
monstBools	fileReading.cpp	/^monstBools::monstBools() {$/;"	f	class:monstBools
monstBools	fileReading.h	/^class monstBools {$/;"	c
monsterDesc	desc.h	/^class monsterDesc {$/;"	c
monsterDescLoc	game.h	/^    string monsterDescLoc;$/;"	m	class:Settings
monsterFactory	monster.cpp	/^monsterFactory::monsterFactory(Dungeon* dun){$/;"	f	class:monsterFactory
monsterFactory	monster.h	/^class monsterFactory {$/;"	c
moveRand	Character.cpp	/^int Character::moveRand() {$/;"	f	class:Character
moveRandTunneling	Character.cpp	/^int NPC::moveRandTunneling() {$/;"	f	class:NPC
moveTo	Character.cpp	/^int Character::moveTo(Coordinate to) {$/;"	f	class:Character
moveToward	Character.cpp	/^int Character::moveToward(Coordinate moveingTo) {$/;"	f	class:Character
moveTowardTunneling	Character.cpp	/^int NPC::moveTowardTunneling(Coordinate coord) {$/;"	f	class:NPC
movement0001	Character.cpp	/^int NPC::movement0001() {$/;"	f	class:NPC
movement0010	Character.cpp	/^int NPC::movement0010(){$/;"	f	class:NPC
movement0011	Character.cpp	/^int NPC::movement0011(){$/;"	f	class:NPC
movement0100	Character.cpp	/^int NPC::movement0100(){$/;"	f	class:NPC
movement0101	Character.cpp	/^int NPC::movement0101(){$/;"	f	class:NPC
movement0110	Character.cpp	/^int NPC::movement0110(){$/;"	f	class:NPC
movement0111	Character.cpp	/^int NPC::movement0111(){$/;"	f	class:NPC
movement1001	Character.cpp	/^int NPC::movement1001() {$/;"	f	class:NPC
movement1010	Character.cpp	/^int NPC::movement1010(){$/;"	f	class:NPC
movement1011	Character.cpp	/^int NPC::movement1011(){$/;"	f	class:NPC
movement1100	Character.cpp	/^int NPC::movement1100(){$/;"	f	class:NPC
movement1101	Character.cpp	/^int NPC::movement1101(){$/;"	f	class:NPC
movement1110	Character.cpp	/^int NPC::movement1110(){$/;"	f	class:NPC
movement1111	Character.cpp	/^int NPC::movement1111(){$/;"	f	class:NPC
movementResDTO	Character.h	/^    movementResDTO() {$/;"	f	class:movementResDTO
movementResDTO	Character.h	/^class movementResDTO {$/;"	c
name	Character.h	/^    string name;$/;"	m	class:Character
name	desc.h	/^    string name;$/;"	m	class:monsterDesc
name	desc.h	/^    string name;$/;"	m	class:objectDesc
name	object.h	/^    string name;$/;"	m	class:object
nameSet	fileReading.h	/^    bool nameSet;$/;"	m	class:monstBools
nameSet	fileReading.h	/^    bool nameSet;$/;"	m	class:objectBools
nextEventTime	Character.h	/^    int nextEventTime;$/;"	m	class:Character
noOverlapFound	dungeon.cpp	/^bool Dungeon::noOverlapFound(Room newRoom) {$/;"	f	class:Dungeon
nummon	game.h	/^    int nummon;$/;"	m	class:Settings
object	object.cpp	/^object::object() {}$/;"	f	class:object
object	object.h	/^class object {$/;"	c
objectBools	fileReading.cpp	/^objectBools::objectBools() {$/;"	f	class:objectBools
objectBools	fileReading.h	/^class objectBools {$/;"	c
objectDesc	desc.h	/^class objectDesc {$/;"	c
objectDescLoc	game.h	/^    string objectDescLoc;$/;"	m	class:Settings
objectDescs	game.cpp	/^vector<objectDesc> objectDescs;$/;"	v
objectFactory	object.cpp	/^objectFactory::objectFactory(Dungeon* dun) {$/;"	f	class:objectFactory
objectFactory	object.h	/^class objectFactory {$/;"	c
objectMap	dungeon.h	/^    vector <vector<object*>> objectMap;$/;"	m	class:Dungeon
openMap	dungeon.h	/^    vector <vector<int>> openMap;$/;"	m	class:Dungeon
operator ()	game.cpp	/^  bool operator()(Character* a, Character* b) {$/;"	f	struct:Compare
parseMonsterDescFile	fileReading.cpp	/^int parseMonsterDescFile(string fileLoc, vector<monsterDesc>& list) {$/;"	f
parseObjectDescFile	fileReading.cpp	/^int parseObjectDescFile(string fileLoc, vector<objectDesc>& list) {$/;"	f
pc	Character.h	/^    PC* pc;$/;"	m	class:NPC
pc	dungeon.h	/^    PC* pc;$/;"	m	class:Dungeon
printMessage	screen.cpp	/^int printMessage(string message) {$/;"	f
putRoomsInDungeon	dungeon.cpp	/^void Dungeon::putRoomsInDungeon() {$/;"	f	class:Dungeon
rarity	desc.h	/^    int rarity;$/;"	m	class:monsterDesc
rarity	desc.h	/^    int rarity;$/;"	m	class:objectDesc
raritySet	fileReading.h	/^    bool raritySet;$/;"	m	class:monstBools
raritySet	fileReading.h	/^    bool raritySet;$/;"	m	class:objectBools
readDiceDesc	fileReading.cpp	/^void readDiceDesc(rollUp& desc, ifstream& file) {$/;"	f
readRooms	dungeon.cpp	/^void Dungeon::readRooms(FILE* file, int fileSize) {$/;"	f	class:Dungeon
readTiles	dungeon.cpp	/^void Dungeon::readTiles(FILE* file) {$/;"	f	class:Dungeon
rebuild	dungeon.cpp	/^void Dungeon::rebuild() {$/;"	f	class:Dungeon
resetDunMap	Character.cpp	/^void PC::resetDunMap() {$/;"	f	class:PC
rollDice	dice.cpp	/^int rollDice(rollUp fruit) {$/;"	f
rollDice	fileReading.cpp	/^int rollDice(rollUp fruit) {$/;"	f
rollUp	desc.h	/^class rollUp {$/;"	c
rooms	dungeon.h	/^    vector<Room> rooms;$/;"	m	class:Dungeon
runGame	game.cpp	/^void runGame(Dungeon& dun) {$/;"	f
save	dungeon.cpp	/^void Dungeon::save(string loc) {$/;"	f	class:Dungeon
save	game.h	/^    bool save;$/;"	m	class:Settings
scrStartup	screen.cpp	/^int scrStartup() {$/;"	f
scrTearDown	screen.cpp	/^int scrTearDown() {$/;"	f
seed	game.h	/^    int seed;$/;"	m	class:Settings
setPC	dungeon.cpp	/^void Dungeon::setPC(PC* pc) {$/;"	f	class:Dungeon
setSettings	game.cpp	/^void setSettings(int argc, char* argv[]) {$/;"	f
setTurnLogic	Character.cpp	/^void NPC::setTurnLogic() {$/;"	f	class:NPC
setType	dungeon.cpp	/^void Tile::setType(TileType type) {$/;"	f	class:Tile
setType	dungeon.cpp	/^void Tile::setType(int hardness) {$/;"	f	class:Tile
settings	game.cpp	/^Settings settings;$/;"	v
setupColors	screen.cpp	/^int setupColors() {$/;"	f
setupDunMap	Character.cpp	/^void PC::setupDunMap() {$/;"	f	class:PC
showMonsterList	Character.cpp	/^void PC::showMonsterList() {$/;"	f	class:PC
sightDist	Character.h	/^    int sightDist;$/;"	m	class:PC
specialAttr	desc.h	/^    rollUp specialAttr;$/;"	m	class:objectDesc
specialAttr	object.h	/^    int specialAttr;$/;"	m	class:object
specialAttrSet	fileReading.h	/^    bool specialAttrSet;$/;"	m	class:objectBools
speed	Character.h	/^    int speed;$/;"	m	class:Character
speed	desc.h	/^    rollUp speed;$/;"	m	class:monsterDesc
speedBuff	desc.h	/^    rollUp speedBuff;$/;"	m	class:objectDesc
speedBuff	object.h	/^    int speedBuff;$/;"	m	class:object
speedBuffSet	fileReading.h	/^    bool speedBuffSet;$/;"	m	class:objectBools
speedSet	fileReading.h	/^    bool speedSet;$/;"	m	class:monstBools
startTeleportMode	Character.cpp	/^int PC::startTeleportMode() {$/;"	f	class:PC
success	Character.h	/^    bool success;$/;"	m	class:movementResDTO
symbol	Character.h	/^    char symbol;$/;"	m	class:Character
symbol	desc.h	/^    char symbol;$/;"	m	class:monsterDesc
symbol	object.h	/^    char symbol;$/;"	m	class:object
symbolSet	fileReading.h	/^    bool symbolSet;$/;"	m	class:monstBools
takeTurn	Character.cpp	/^int Character::takeTurn() {$/;"	f	class:Character
takeTurn	Character.cpp	/^int NPC::takeTurn() {$/;"	f	class:NPC
takeTurn	Character.cpp	/^int PC::takeTurn() {$/;"	f	class:PC
teleport	Character.cpp	/^int PC::teleport(Coordinate to) {$/;"	f	class:PC
tryToMove	Character.cpp	/^movementResDTO PC::tryToMove(Coordinate to) {$/;"	f	class:PC
tunnelMap	dungeon.h	/^    vector <vector<int>> tunnelMap;$/;"	m	class:Dungeon
turnLogic	Character.h	/^    int (NPC::*turnLogic)();$/;"	m	class:NPC
turnOffColorPair	screen.cpp	/^int turnOffColorPair(string str) {$/;"	f
turnOnColorPair	screen.cpp	/^int turnOnColorPair(string str) {$/;"	f
type	Character.h	/^    char type;$/;"	m	class:NPC
type	desc.h	/^    string type;$/;"	m	class:objectDesc
type	dungeon.h	/^    TileType type;$/;"	m	class:Tile
type	object.h	/^    string type;$/;"	m	class:object
typeSet	fileReading.h	/^    bool typeSet;$/;"	m	class:objectBools
updateDistMap	dungeon.cpp	/^void Dungeon::updateDistMap(vector<vector<int>>& distMap, vector<Coordinate>& queue, CoordPair pair, bool canTunnel) {$/;"	f	class:Dungeon
updateDistMaps	dungeon.cpp	/^void Dungeon::updateDistMaps() {$/;"	f	class:Dungeon
updateDunMap	Character.cpp	/^void PC::updateDunMap() {$/;"	f	class:PC
updatePCLoc	Character.cpp	/^void NPC::updatePCLoc() {$/;"	f	class:NPC
updateSpace	dungeon.cpp	/^void Dungeon::updateSpace(Coordinate coord, Character* ptr) {$/;"	f	class:Dungeon
value	desc.h	/^    rollUp value;$/;"	m	class:objectDesc
value	object.h	/^    int value;$/;"	m	class:object
valueSet	fileReading.h	/^    bool valueSet;$/;"	m	class:objectBools
wasCreated	desc.h	/^    bool wasCreated;$/;"	m	class:objectDesc
weight	desc.h	/^    rollUp weight;$/;"	m	class:objectDesc
weight	object.h	/^    int weight;$/;"	m	class:object
weightSet	fileReading.h	/^    bool weightSet;$/;"	m	class:objectBools
width	dungeon.h	/^    uint8_t width;$/;"	m	class:Room
x	defs.h	/^    int x;$/;"	m	class:Coordinate
x	dungeon.h	/^    uint8_t x;$/;"	m	class:Room
y	defs.h	/^    int y;$/;"	m	class:Coordinate
y	dungeon.h	/^    uint8_t y;$/;"	m	class:Room
~Character	Character.cpp	/^Character::~Character() {}$/;"	f	class:Character
~NPC	Character.cpp	/^NPC::~NPC(){}$/;"	f	class:NPC
~PC	Character.cpp	/^PC::~PC(){}$/;"	f	class:PC
