!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BORDER	defs.h	/^  BORDER,$/;"	e	enum:TileType
BORDER_CHAR	defs.h	18;"	d
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wall -Werror -std=c++11$/;"	m
CHARACTER_H	Character.cpp	1;"	d	file:
CHARACTER_H	dungeon.h	22;"	d
CHARACTER_H	game.h	30;"	d
CLIMITS	dungeon.h	18;"	d
Character	Character.cpp	/^Character::Character() {$/;"	f	class:Character
Character	Character.h	/^class Character {$/;"	c
Compare	game.cpp	/^struct Compare {$/;"	s	file:
CoordPair	dungeon.h	/^    CoordPair(Coordinate initial, Coordinate comparingTo) {$/;"	f	class:CoordPair
CoordPair	dungeon.h	/^class CoordPair {$/;"	c
Coordinate	defs.h	/^    Coordinate() {$/;"	f	class:Coordinate
Coordinate	defs.h	/^    Coordinate(int y, int x) {$/;"	f	class:Coordinate
Coordinate	defs.h	/^class Coordinate {$/;"	c
DEBUG	defs.h	24;"	d
DEFS_H	dungeon.h	10;"	d
DEFS_H	screen.h	10;"	d
DOWNSTAIR	defs.h	/^  DOWNSTAIR$/;"	e	enum:TileType
DOWNSTAIR_CHAR	defs.h	20;"	d
DUNGEON_H	Character.h	6;"	d
DUNGEON_H	dungeon.cpp	1;"	d	file:
DUNGEON_H	game.h	2;"	d
Dungeon	dungeon.cpp	/^Dungeon::Dungeon() {$/;"	f	class:Dungeon
Dungeon	dungeon.cpp	/^Dungeon::Dungeon(string loc) {$/;"	f	class:Dungeon
Dungeon	dungeon.h	/^class Dungeon {$/;"	c
ERRATIC_BIT	defs.h	11;"	d
FUNCTIONAL	Character.h	10;"	d
GAME_H	game.cpp	1;"	d	file:
HALL	defs.h	/^  HALL,$/;"	e	enum:TileType
HALL_CHAR	defs.h	15;"	d
INTELLIGENCE_BIT	defs.h	8;"	d
IOSTREAM	Character.h	2;"	d
IOSTREAM	dungeon.h	14;"	d
IOSTREAM	game.h	18;"	d
MAX_HARDNESS	defs.h	1;"	d
MAX_HEIGHT	defs.h	3;"	d
MAX_RAND_MONST_COUNT	defs.h	22;"	d
MAX_WIDTH	defs.h	2;"	d
MIN_ROOM_COUNT	defs.h	6;"	d
MIN_ROOM_HEIGHT	defs.h	4;"	d
MIN_ROOM_WIDTH	defs.h	5;"	d
MOVE_BETWEEN_FLOORS	defs.h	13;"	d
NCURSES_H	screen.h	2;"	d
NPC	Character.cpp	/^NPC::NPC(int id, Coordinate coord, int speed, Dungeon* dun, int nextEventTime, char type, PC* pc) {$/;"	f	class:NPC
NPC	Character.h	/^class NPC : public Character {$/;"	c
PC	Character.cpp	/^PC::PC(int id, Coordinate coord, int speed, Dungeon* dun, int nextEventTime) {$/;"	f	class:PC
PC	Character.h	/^class PC : public Character {$/;"	c
QUEUE	game.h	26;"	d
REQ	Makefile	/^REQ=clean genCtags game.cpp dungeon.cpp Character.cpp screen.o$/;"	m
ROCK	defs.h	/^  ROCK,$/;"	e	enum:TileType
ROCK_CHAR	defs.h	17;"	d
ROOM	defs.h	/^  ROOM,$/;"	e	enum:TileType
ROOM_CHAR	defs.h	16;"	d
Room	dungeon.cpp	/^Room::Room() {$/;"	f	class:Room
Room	dungeon.cpp	/^Room::Room(int y, int x, int height, int width) {$/;"	f	class:Room
Room	dungeon.h	/^class Room {$/;"	c
SCREEN_H	dungeon.h	26;"	d
SCREEN_H	game.h	34;"	d
SSTREAM	Character.h	22;"	d
STDLIB_H	dungeon.h	2;"	d
STDLIB_H	game.h	10;"	d
STDLIB_H	game.h	6;"	d
STRING	Character.h	18;"	d
STRING	game.h	22;"	d
Settings	game.h	/^class Settings{$/;"	c
TELEPATHY_BIT	defs.h	9;"	d
TIME_H	game.h	14;"	d
TUNNELING_BIT	defs.h	10;"	d
Tile	dungeon.cpp	/^Tile::Tile(TileType type) {$/;"	f	class:Tile
Tile	dungeon.h	/^class Tile {$/;"	c
TileType	defs.h	/^enum TileType {$/;"	g
UNISTD_H	Character.h	14;"	d
UNISTD_H	screen.h	6;"	d
UPSTAIR	defs.h	/^  UPSTAIR,$/;"	e	enum:TileType
UPSTAIR_CHAR	defs.h	19;"	d
VECTOR	dungeon.h	6;"	d
addHallways	dungeon.cpp	/^void Dungeon::addHallways() {$/;"	f	class:Dungeon
addRooms	dungeon.cpp	/^void Dungeon::addRooms(int numRooms) {$/;"	f	class:Dungeon
addStairs	dungeon.cpp	/^void Dungeon::addStairs() {$/;"	f	class:Dungeon
build	dungeon.cpp	/^void Dungeon::build() {$/;"	f	class:Dungeon
canSeeFrom	dungeon.cpp	/^bool Dungeon::canSeeFrom(Coordinate from, Coordinate to) {$/;"	f	class:Dungeon
charMap	dungeon.h	/^    vector <vector<Character*>> charMap;$/;"	m	class:Dungeon
comparingTo	dungeon.h	/^    Coordinate comparingTo;$/;"	m	class:CoordPair
coord	Character.h	/^    Coordinate coord;$/;"	m	class:Character
draw	dungeon.cpp	/^void Dungeon::draw() {$/;"	f	class:Dungeon
drawCharacter	screen.cpp	/^int drawCharacter(Coordinate coord, char symbol) {$/;"	f
drawDunMap	Character.cpp	/^void PC::drawDunMap() {$/;"	f	class:PC
drawMonsterBox	Character.cpp	/^void PC::drawMonsterBox(int topLeft_y, int topLeft_x, int horBorderWidth, int vertBorderWidth, int numMonstersShown, int stringAreaWidth) {$/;"	f	class:PC
drawString	screen.cpp	/^int drawString(Coordinate coord, char* str) {$/;"	f
dun	Character.h	/^    Dungeon* dun;$/;"	m	class:Character
dunMap	Character.h	/^    vector<vector<TileType>> dunMap;$/;"	m	class:PC
dungeonInit	game.cpp	/^Dungeon dungeonInit() {$/;"	f
endianSwap_uInt	dungeon.cpp	/^uint32_t Dungeon:: endianSwap_uInt(int input) {$/;"	f	class:Dungeon
fillDistMap	dungeon.cpp	/^void Dungeon::fillDistMap(vector<vector<int>>& distMap, vector<Coordinate>& queue, bool canTunnel) {$/;"	f	class:Dungeon
fillMonsterList	Character.cpp	/^vector<string> PC::fillMonsterList() {$/;"	f	class:PC
genBaseDun	dungeon.cpp	/^void Dungeon::genBaseDun() {$/;"	f	class:Dungeon
genCharacterType	game.cpp	/^char genCharacterType() {$/;"	f
genDistMap	dungeon.cpp	/^vector<vector<int>> Dungeon::genDistMap(int y, int x, bool canTunnel) {$/;"	f	class:Dungeon
genMonsterString	Character.cpp	/^string PC::genMonsterString(int ydiff, int xdiff, char symbol) {$/;"	f	class:PC
getCharacterId	Character.cpp	/^int Character::getCharacterId(Coordinate loc) {$/;"	f	class:Character
getEmptyMap	dungeon.cpp	/^vector<vector<int>> getEmptyMap() {$/;"	f
getEmptySpace	dungeon.cpp	/^Coordinate Dungeon::getEmptySpace() {$/;"	f	class:Dungeon
getSymbol	Character.cpp	/^char getSymbol(char type) {$/;"	f
getTileSym	dungeon.cpp	/^char getTileSym(TileType type) {$/;"	f
hardness	dungeon.h	/^    uint8_t hardness;$/;"	m	class:Tile
height	dungeon.h	/^    uint8_t height;$/;"	m	class:Room
id	Character.h	/^    int id;$/;"	m	class:Character
initial	dungeon.h	/^    Coordinate initial;$/;"	m	class:CoordPair
isOpenSpace	dungeon.cpp	/^bool Dungeon::isOpenSpace(Coordinate coord) {$/;"	f	class:Dungeon
killed	Character.h	/^    int killed;$/;"	m	class:movementResDTO
lastSeenPCLoc	Character.h	/^    Coordinate lastSeenPCLoc;$/;"	m	class:NPC
load	game.h	/^    bool load;$/;"	m	class:Settings
loadSaveLoc	game.h	/^    string loadSaveLoc;$/;"	m	class:Settings
main	game.cpp	/^int main(int argc, char* argv[]) {$/;"	f
makePathToRoom	dungeon.cpp	/^void  Dungeon::makePathToRoom(Room from, Room to) {$/;"	f	class:Dungeon
map	dungeon.h	/^    vector <vector<Tile>> map;$/;"	m	class:Dungeon
moveRand	Character.cpp	/^int Character::moveRand() {$/;"	f	class:Character
moveRandTunneling	Character.cpp	/^int NPC::moveRandTunneling() {$/;"	f	class:NPC
moveTo	Character.cpp	/^int Character::moveTo(Coordinate to) {$/;"	f	class:Character
moveToward	Character.cpp	/^int Character::moveToward(Coordinate moveingTo) {$/;"	f	class:Character
moveTowardTunneling	Character.cpp	/^int NPC::moveTowardTunneling(Coordinate coord) {$/;"	f	class:NPC
movement0001	Character.cpp	/^int NPC::movement0001() {$/;"	f	class:NPC
movement0010	Character.cpp	/^int NPC::movement0010(){$/;"	f	class:NPC
movement0011	Character.cpp	/^int NPC::movement0011(){$/;"	f	class:NPC
movement0100	Character.cpp	/^int NPC::movement0100(){$/;"	f	class:NPC
movement0101	Character.cpp	/^int NPC::movement0101(){$/;"	f	class:NPC
movement0110	Character.cpp	/^int NPC::movement0110(){$/;"	f	class:NPC
movement0111	Character.cpp	/^int NPC::movement0111(){$/;"	f	class:NPC
movement1001	Character.cpp	/^int NPC::movement1001() {$/;"	f	class:NPC
movement1010	Character.cpp	/^int NPC::movement1010(){$/;"	f	class:NPC
movement1011	Character.cpp	/^int NPC::movement1011(){$/;"	f	class:NPC
movement1100	Character.cpp	/^int NPC::movement1100(){$/;"	f	class:NPC
movement1101	Character.cpp	/^int NPC::movement1101(){$/;"	f	class:NPC
movement1110	Character.cpp	/^int NPC::movement1110(){$/;"	f	class:NPC
movement1111	Character.cpp	/^int NPC::movement1111(){$/;"	f	class:NPC
movementResDTO	Character.h	/^    movementResDTO() {$/;"	f	class:movementResDTO
movementResDTO	Character.h	/^class movementResDTO {$/;"	c
nextEventTime	Character.h	/^    int nextEventTime;$/;"	m	class:Character
noOverlapFound	dungeon.cpp	/^bool Dungeon::noOverlapFound(Room newRoom) {$/;"	f	class:Dungeon
nummon	game.h	/^    int nummon;$/;"	m	class:Settings
openMap	dungeon.h	/^    vector <vector<int>> openMap;$/;"	m	class:Dungeon
operator ()	game.cpp	/^  bool operator()(Character* a, Character* b) {$/;"	f	struct:Compare
pc	Character.h	/^    PC* pc;$/;"	m	class:NPC
pc	dungeon.h	/^    PC* pc;$/;"	m	class:Dungeon
putRoomsInDungeon	dungeon.cpp	/^void Dungeon::putRoomsInDungeon() {$/;"	f	class:Dungeon
readRooms	dungeon.cpp	/^void Dungeon::readRooms(FILE* file, int fileSize) {$/;"	f	class:Dungeon
readTiles	dungeon.cpp	/^void Dungeon::readTiles(FILE* file) {$/;"	f	class:Dungeon
rebuild	dungeon.cpp	/^void Dungeon::rebuild() {$/;"	f	class:Dungeon
resetDunMap	Character.cpp	/^void PC::resetDunMap() {$/;"	f	class:PC
rooms	dungeon.h	/^    vector<Room> rooms;$/;"	m	class:Dungeon
runGame	game.cpp	/^void runGame(Dungeon& dun) {$/;"	f
save	dungeon.cpp	/^void Dungeon::save(string loc) {$/;"	f	class:Dungeon
save	game.h	/^    bool save;$/;"	m	class:Settings
scrStartup	screen.cpp	/^int scrStartup() {$/;"	f
scrTearDown	screen.cpp	/^int scrTearDown() {$/;"	f
seed	game.h	/^    int seed;$/;"	m	class:Settings
setPC	dungeon.cpp	/^void Dungeon::setPC(PC* pc) {$/;"	f	class:Dungeon
setSettings	game.cpp	/^void setSettings(int argc, char* argv[]) {$/;"	f
setTurnLogic	Character.cpp	/^void NPC::setTurnLogic() {$/;"	f	class:NPC
setType	dungeon.cpp	/^void Tile::setType(TileType type) {$/;"	f	class:Tile
setType	dungeon.cpp	/^void Tile::setType(int hardness) {$/;"	f	class:Tile
settings	game.cpp	/^Settings settings;$/;"	v
setupDunMap	Character.cpp	/^void PC::setupDunMap() {$/;"	f	class:PC
showMonsterList	Character.cpp	/^void PC::showMonsterList() {$/;"	f	class:PC
sightDist	Character.h	/^    int sightDist;$/;"	m	class:PC
speed	Character.h	/^    int speed;$/;"	m	class:Character
success	Character.h	/^    bool success;$/;"	m	class:movementResDTO
symbol	Character.h	/^    char symbol;$/;"	m	class:Character
takeTurn	Character.cpp	/^int Character::takeTurn() {$/;"	f	class:Character
takeTurn	Character.cpp	/^int NPC::takeTurn() {$/;"	f	class:NPC
takeTurn	Character.cpp	/^int PC::takeTurn() {$/;"	f	class:PC
tryToMove	Character.cpp	/^movementResDTO PC::tryToMove(Coordinate to) {$/;"	f	class:PC
tunnelMap	dungeon.h	/^    vector <vector<int>> tunnelMap;$/;"	m	class:Dungeon
turnLogic	Character.h	/^    int (NPC::*turnLogic)();$/;"	m	class:NPC
type	Character.h	/^    char type;$/;"	m	class:NPC
type	dungeon.h	/^    TileType type;$/;"	m	class:Tile
updateDistMap	dungeon.cpp	/^void Dungeon::updateDistMap(vector<vector<int>>& distMap, vector<Coordinate>& queue, CoordPair pair, bool canTunnel) {$/;"	f	class:Dungeon
updateDistMaps	dungeon.cpp	/^void Dungeon::updateDistMaps() {$/;"	f	class:Dungeon
updateDunMap	Character.cpp	/^void PC::updateDunMap() {$/;"	f	class:PC
updatePCLoc	Character.cpp	/^void NPC::updatePCLoc() {$/;"	f	class:NPC
updateSpace	dungeon.cpp	/^void Dungeon::updateSpace(Coordinate coord, Character* ptr) {$/;"	f	class:Dungeon
width	dungeon.h	/^    uint8_t width;$/;"	m	class:Room
x	defs.h	/^    int x;$/;"	m	class:Coordinate
x	dungeon.h	/^    uint8_t x;$/;"	m	class:Room
y	defs.h	/^    int y;$/;"	m	class:Coordinate
y	dungeon.h	/^    uint8_t y;$/;"	m	class:Room
~Character	Character.cpp	/^Character::~Character() {}$/;"	f	class:Character
~NPC	Character.cpp	/^NPC::~NPC(){}$/;"	f	class:NPC
~PC	Character.cpp	/^PC::~PC(){}$/;"	f	class:PC
