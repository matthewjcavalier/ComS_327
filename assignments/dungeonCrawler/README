Compliance:

  The current state of the program complies to the homework spec. Two distance
  maps are generated in the main game loop and they are then printed off. The 
  main game loop only runs once at this time, in it the dungeon distance maps
  are generated and printed. All previous functionality still works, so if needed
  a dungeon can be saved and loaded still.

  SideNote:
  
    When running the program using the dungeons that were provided to test the
    map generation, I noticed that the distances for the map for the tunneling
    monsters is just slightly wrong.

Interesting Functions:

  fillMap & fillLogic (see pathfinding.c)
      
      - these two funcitons are where the bulk of the pathfinding algo, that is
        a form of Dijkstra's algo, lives

  getPathMapOnlyOpenArea & getPathMapEverywhere (see pathfinding.c)
      
      - these two functions are used to fill out the distance maps. The first
        only charts the distances assuming that open terrain (i.e. halls and
        rooms) are going to be traversed. The second function assumes that
        the map generated should allow for tunneling through rock.

  updateSeed (see crawler.c)
      
      - I thought it would be cool for the player character to always be placed
        in the same random spot regardless of if the dungeon was just generated
        or loaded. So this function seeds the random number generator using
        the room info of the dungeon.

Data structures:

  CoordQueue (See queue.c)
      
      - A queue data structure that houses a queue of coordinates. Currently the
        queue is non-generic, but the goal is for this to be completely generic
        in the future

File Names:

  queue.c         the c source file that contains the new CoordQueue data structure

  queue.h         the header file for queue.h

  pathfinding.c   the c source file that contains the functions for the pathfinding
  
  pathfinding.h   the header file for pathfinding.c
