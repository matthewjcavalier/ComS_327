Compliance:

  The current state of my program is able to load a dungeon from a file, save a dungeon to a
  file, do both of those at the same time, and correctly display the loaded dungeon.
  
  Side Notes:

    The current release of the program comes with two more flags that can be set when the program
    is started:

      --save    saves the dungeon that is created to ~/.rlg327/dungeon (note this will fail
                if the directory ~/.rlg327 does not exist)
                
                  ex:
                        ./crawler --save

      --load    loads the dungeon from data stored in ~/.rlg327/dungeon (note this will fail
                if the file ~/.rlg327/dungeon does not exist)
                
                  ex:
                        ./crawler --load

Interesting Functions:

  endianSwap_uInt (see generator.c)

      - Because I was unaware that there was a library for swapping between endianess, I
        went ahead and created my own converter.

  loadDungeon and saveDungeon (see generator.c)

      - These two functions are the meat of the new code from this week's homework.

Data structures:

  Generic singly linked list (see list.c)
  
      - I needed to refator how I was storing my rooms, as in my previous version
        I stored the rooms in an array of static size. So I thought it would be
        cool if I implemented a generic linked list to store them as it's dynamic
        in both memory usage and what can be stored in it.

File Names:

  list.c      The c source file for the singly linked list data structure

  list.h      The header file for list.c

